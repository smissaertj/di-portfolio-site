<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joeri JM Smissaert</title>
    <link>https://joerismissaert.dev/</link>
    <description>Recent content on Joeri JM Smissaert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://joerismissaert.dev/privacy-policy&#34;&gt;Privacy Policy&lt;/a&gt; &amp; &lt;a href=&#34;https://joerismissaert.dev/terms-of-service&#34;&gt;Terms of Service&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 07 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://joerismissaert.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring and Auto Mounting Remote File Systems Using fstab and automount: NFS &amp; CIFS</title>
      <link>https://joerismissaert.dev/configuring-and-auto-mounting-remote-file-systems-using-fstab-and-automount-NFS-CIFS/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joerismissaert.dev/configuring-and-auto-mounting-remote-file-systems-using-fstab-and-automount-NFS-CIFS/</guid>
      <description>firewalld: nfs, mountd, rpc-bind
NFS Server yum install nfs-utils
Mounting nfs shares showmount -e nfs-server mount nfs-server:/share /mnt /etc/fstab ==&amp;gt; _netdev mount option. nfs-server:/data /nfs nfs _netdev 0 0
Mounting Samba shares cifs-utils samba-client smbclient -L //sambahost mount -o username=sambeuser //sambahost/share /mountpoint _netdev,username=,password= or noauto
If you want to allow samba to modify public files used for public file transfer services. Files/Directories must be labeled public_content_rw_t., you must turn on the smbd_anon_write boolean.</description>
    </item>
    
    <item>
      <title>Managing a Firewall with Firewalld</title>
      <link>https://joerismissaert.dev/managing-a-firewall-with-firewalld/</link>
      <pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joerismissaert.dev/managing-a-firewall-with-firewalld/</guid>
      <description>Understanding Linux Firewalling Firewalling is implemented in the Linux kernel by means of the netfilter subsystem to limit traffic coming in to a server or going out of the server. Netfilter allows kernel modules to inspect every incoming, outgoing, or forwarded packet and act upon it by either allowing it or blocking it. In essence, netfilter controls access to and from the network stack at the Linux kernel module level.</description>
    </item>
    
    <item>
      <title>Enhancing Linux Security with SELinux</title>
      <link>https://joerismissaert.dev/enhancing-linux-security-with-selinux/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joerismissaert.dev/enhancing-linux-security-with-selinux/</guid>
      <description>SELinux is a security enhancement module, deployed on top of Linux, which provides improved security via Role Based Access Controls (RBACs) on subjects and objects (processes and resources). Traditional Linux security used Discretionary Access Controls (DACs).
With DAC, a process can access any file, directory, device or other resource that leaves itself open to access. Using RBAC, a process only has access to resources that it is explicitely allowd to access, based on the assigned role.</description>
    </item>
    
    <item>
      <title>Network Services - Managing Apache HTTP</title>
      <link>https://joerismissaert.dev/network-services-managing-apache-http/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joerismissaert.dev/network-services-managing-apache-http/</guid>
      <description>Managing Apache HTTP Services is not part of the current RHCSA exam objectives, but we need minimal knowledge on this topic in order to master the SELinux-related objectives later on.
The Apache server is provided through different software packages. The basic packages is httpd which contains everything for an operational but basic website. For a complete overview of all the packages use yum search httpd.
Understanding the httpd Package Let&amp;rsquo;s examine the httpd package by downloading it using yumdownloader and running a few rpm commands on it:</description>
    </item>
    
    <item>
      <title>Network Services - Configuring SSH</title>
      <link>https://joerismissaert.dev/network-services-configuring-ssh/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joerismissaert.dev/network-services-configuring-ssh/</guid>
      <description>Hardening the SSH Server SSH is a convenient and important solution to establish remote connections to servers. If your SSH server is visible directly from the internet, you can be sure that sooner or later intruders will try to connect to it, intending to do harm.
Dictionary attacks are common against an SSH server. SSH servers usually offer their services on port 22, and every Linux servers has a root account.</description>
    </item>
    
    <item>
      <title>Introduction to Bash Shell Scripting</title>
      <link>https://joerismissaert.dev/introduction-to-bash-shell-scripting/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joerismissaert.dev/introduction-to-bash-shell-scripting/</guid>
      <description>Core Elements A shell script is a list of sequentially executed commands with optional scripting logic to allow code to be executed under specific conditions only. Starting a script from the parent shell opens a subshell from where the commands in the script are executed. These commands can be interpreted in different ways, to make it clear how they should be interpreted the shebang is used on the first line of the script: #!</description>
    </item>
    
    <item>
      <title>Troubleshooting Boot Issues</title>
      <link>https://joerismissaert.dev/troubleshooting-boot-issues/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joerismissaert.dev/troubleshooting-boot-issues/</guid>
      <description>The RHEL8 Boot Procedure In order to fix boot issues we need to be able to judge in which phase of the boot procedure the issue occurs so we can apply appropriate means to fix it. The following steps summarize the boot procedure:
 POST - The machine is powered on, the Power-On-Self-Test executes and hardware required to start the system is initialized. Boot device selection - From UEFI or BIOS, a bootable device is located.</description>
    </item>
    
    <item>
      <title>Managing Systemd Targets and Working with GRUB2</title>
      <link>https://joerismissaert.dev/managing-systemd-targets-working-with-grub2/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joerismissaert.dev/managing-systemd-targets-working-with-grub2/</guid>
      <description>Managing Systemd Targets A Systemd target is a group of units belonging together, some of these targets can be used to define the state a system should boot in. These targets can be isolated and have the AllowIsolate property in their [Unit] section.
Four targets can be used to boot into:
 emergency.target : A minimal number of units are started. rescue.target : A fully operation Linux system without nonessential services.</description>
    </item>
    
    <item>
      <title>Basic Kernel Management</title>
      <link>https://joerismissaert.dev/basic-kernel-management/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joerismissaert.dev/basic-kernel-management/</guid>
      <description>The Role of the Linux Kernel The Linux kernel is the layer between the user who works with Linux from a shell environment and the available hardware. It manages the I/O instructions received from software and translates it to CPU instructions. The kernel also handles essential operating system tasks like the scheduler to make sure that any processes started on the OS are handled by the CPU.
OS tasks that are handled by the kernel are implemented by using different kernel threads.</description>
    </item>
    
    <item>
      <title>Advanced Storage: Virtual Data Optimizer</title>
      <link>https://joerismissaert.dev/advanced-storage-virtual-data-optimizer/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joerismissaert.dev/advanced-storage-virtual-data-optimizer/</guid>
      <description>Virtual Data Optimizer is a storage solution developed to reduce disk space usage on block devices by applying deduplication features. VDO creates volumes on top of any existing block device from where you either create an XFS file system, or use the volume as a Physical Volume in an LVM setup.
VDO uses three common technologies:
 Zero-block elimination to filter out data blocks that contain only zeros. Deduplication of redundant data blocks.</description>
    </item>
    
  </channel>
</rss>
